"""
1. Вводится натуральное число n. Для этого числа вычислите n-ое число Фибоначчи и выведите сумму этого числа и его
факториала. Вычисление числа Фибоначчи и факториала вынесите в отдельные функции factorial(n) и fib(n).
Считайте первое число Фибоначчи равным единице.
"""

# n = int(input())
#
#
# def fib(n):
#     if n == 1 or n == 2:
#         return 1
#     else:
#         return fib(n-1) + fib(n-2)
#
#
# def factorial(n):
#     if n == 1:
#         return 1
#     else:
#         return n * factorial(n-1)
#
#
# print(fib(n) + factorial(n))


"""
2. Напишите реализацию функции closest_mod_5, принимающую в качестве единственного аргумента целое число x и возвращающую 
самое маленькое целое число y, такое что: 
-y больше или равно x   
-y делится нацело на 5
"""

# def closet_mod_5(x):
#     y = x
#     if y % 5 == 0:
#         return y
#     else:
#         return closet_mod_5(x+1)
#
#
# print(closet_mod_5(6))


"""
3. В языке Python есть некоторые ограничения на имена переменных. Имена переменных:
 -могут состоять только из цифр, букв и знаков подчеркивания;
 -не могут начинаться с цифры.
 Программист вводит строки с именами переменных. Для каждой переменной нужно вывести "Можно использовать", 
 если ее имя корректно, или "Нельзя использовать", если это не так. Определив все нужные переменные, программист 
 заканчивает ввод строкой "Поработали, и хватит". Для проверки каждой строки используйте функцию check_variable(v). 
 Для простоты будем считать, что программист использует только латинские буквы.
"""

# def check_variable(v):
#     if v[0] in '1234567890':
#         return 'Нельзя использовать'
#     for symb in v:
#         if symb in '.,<>@$%^&#!?/\|+-():;*' or symb.istitle():
#             return 'Нельзя использовать'
#     return 'Можно использовать'
#
#
# name = input()
# while name != 'Поработали, и хватит':
#     print(check_variable(name))
#     name = input()


"""
4. Пользователь делает вклад в размере а рублей сроком на years лет под 10% годовых (каждый год размер его вклада 
увеличивается на 10%. Эти деньги прибавляются к сумме вклада, и на них в следующем году тоже будут проценты). 
Написать функцию bank, принимающая аргументы a и years, и возвращающую сумму, которая будет на счету пользователя.
"""

# def bank(a, years):
#     if years == 0:
#         return a
#     else:
#         return bank(a * 1.1, years - 1)
#
#
# print(bank(100, 2))


"""
5. Напишите рекурсивную функцию get_length(obj), которая принимает на вход итерируемый объект (строку, список 
или кортеж) и выводит его длину
"""

# def get_length(obj):
#     if not obj:
#         return 0
#     return 1 + get_length(obj[1:])
#
#
# text1 = 'привет!'
# text2 = ['п', 'р', 'и', 'в', 'е', 'т', '!']
# text3 = ('п', 'р', 'и', 'в', 'е', 'т', '!')
#
# print(get_length(text1))
# print(get_length(text2))
# print(get_length(text3))


"""
6. Реализуйте рекурсивную функцию get_pow(a, n), которая возводит число a в степень n. Для построения рекурсивного 
алгоритма используйте тот факт, что a**n=a*a**(n-1). Числа a и n целые и неотрицательные и при этом не могут 
одновременно равняться нулю.
"""

# def get_pow(a, n):
#     if a == 1:
#         return a
#     else:
#         return a * a ** (n - 1)
#
#
# print(get_pow(2, 3))


"""
7. Дано натуральное число N. Вычислите сумму его цифр используя рекурсию.
"""

# def summ(num):
#     if num < 10:
#         return num
#     else:
#         return summ(num // 10) + summ(num % 10)
#
#
# n = int(input())
# print(summ(n))


"""
8. Дана функция, которая выводит все простые числа в промежутке от 1 до 100. Написать декоратор который будет 
проверять время работы этой функции. Задекорировать функцию. Вывести время работы этой функции, 
а так же сами простые числа. 
"""

# import time
#
#
# def stop_time(func):
#     def my_time(a, b):
#         start_time = time.time()
#         func(a, b)
#         end_time = time.time()
#         print(f'Время выполнения функции - {end_time - start_time} секунд')
#     return my_time
#
#
# @stop_time
# def all_prime(a, b):
#     array = []
#     for i in range(a, b + 1):
#         counter = 0
#         for j in range(1, i + 1):
#             if i % j == 0:
#                 counter += 1
#         if counter == 2:
#             array.append(i)
#     return print(array)
#
#
# all_prime(1, 100)


"""
9. Дана функция которая запрашивает у пользователя определённые данные для регистрации на портале и запоминает их. 
Напишите декоратор, который будет засекать время проведённое пользователем на портале при регистрации.
"""


# import time
#
#
# def stop_time(func):
#     def my_time():
#         start_time = time.time()
#         func()
#         end_time = time.time()
#         print(f'Время нахождения на портале при регистрации составило {round(end_time - start_time, 2)} секунд')
#     return my_time
#
#
# @stop_time
# def registration():
#     name = input('Введите ваше имя: ')
#     surname = input('Введите вашу фамилию: ')
#     age = int(input('Введите количество полных лет: '))
#     mail = input('Введите ваш email в формате ***@***.***: ')
#     return print(f'Добрый день, {name} {surname} !')
#
#
#
# registration()